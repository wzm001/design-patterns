
/**
 * 设计模式的六大原则：
 * 1、开闭原则：一个软件实体如类、模块或函数，应该对修改封闭，对扩展开放。
 * 2、单一指责原则：一个类只做一件事情，一个类应该只有一个引起它修改的原因。
 * 3、里氏替换原则：子类应该可以完全替代父类。也就是说，在使用继承时，只扩展新功能，不要破坏父类原有的功能。
 * 4、依赖倒置原则：细节应该依赖于抽象，抽象不应该依赖细节。把抽象层放在程序设计的高层，并保持稳定。程序的细节变化由底层的实现层来完成。
 * 5、迪米特法则：又叫"最少知道原则"，一个类不应该知道自己操作的类的细节。换言之，只和朋友谈话，不和朋友的朋友谈话。
 * 6、接口隔离原则：客户端不应该依赖它不需要的接口。如果一个接口在实现时，部分方法由于冗余被客户端实现，则应该将接口拆分，让实现类只需依赖自己需要的接口方法。
 */
package com.wzm.pattern;
